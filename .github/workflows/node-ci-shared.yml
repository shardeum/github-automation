name: Shardeum Reusable CI Workflow for Node projects

on:
  issue_comment:
  workflow_call:
    inputs:
      node-version:
        required: false
        default: "18.16.1"
        type: string
      lint-required:
        required: false
        default: true
        type: boolean
      format-check-required:
        required: false
        default: true
        type: boolean
      apply-patches-required:
        required: false
        default: true
        type: boolean
      unit-tests-required:
        required: false
        default: true
        type: boolean
      jenkins-qa-required:
        required: false
        default: true
        type: boolean

permissions:
  issues: write
  pull-requests: write

# Repository variables must be passed in at the workflow level
env:
  NODE_VERSION: ${{ inputs.node-version || vars.NODE_VERSION }}
  JENKINS_QA_JOB: ${{ inputs.jenkins-qa-required == false && 'false' || inputs.jenkins-qa-required || vars.JENKINS_QA_JOB || '' }}
  IS_LINT_REQUIRED: ${{ inputs.lint-required == false && 'false' || inputs.lint-required || vars.IS_LINT_REQUIRED }}
  IS_FORMAT_CHECK_REQUIRED: ${{ inputs.format-check-required == false && 'false' || inputs.format-check-required || vars.IS_FORMAT_CHECK_REQUIRED }}
  IS_APPLY_PATCHES_REQUIRED: ${{ inputs.apply-patches-required == false && 'false' || inputs.apply-patches-required || vars.IS_APPLY_PATCHES_REQUIRED }}
  IS_UNIT_TESTS_REQUIRED: ${{ inputs.unit-tests-required == false && 'false' || inputs.unit-tests-required || vars.IS_UNIT_TESTS_REQUIRED }}
  IS_JENKINS_QA_REQUIRED: ${{ inputs.jenkins-qa-required == false && 'false' || inputs.jenkins-qa-required || vars.IS_JENKINS_QA_REQUIRED }}
  JENKINS_URL: ${{ vars.JENKINS_URL }}

jobs:
  debug-info:
    runs-on: ubuntu-latest
    name: Display useful debugging information
    steps:
      - name: Display Event details
        run: |
          echo "Event Name:           ${{ github.event_name }}"
          echo "Event Action:         ${{ github.event.action }}"
          echo "Event Sender Type:    ${{ github.event.sender.type }}"
  pr_agent_job:
    name: Run pr agent on every pull request, respond to user comments
    runs-on: ubuntu-latest
    if: ${{ github.event.sender.type != 'Bot' }}
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: PR Agent action step
        id: pragent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github_action_config.auto_review: "true" # enable auto review
          github_action_config.auto_describe: "false" # disable auto describe
          github_action_config.auto_improve: "false" # disable auto improve

  merge-checks:
    name: QA merge checks
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'issue_comment' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.0.0

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Echo Input Values and Check Defaults
        run: |
          echo "Node Version: ${{ env.NODE_VERSION }} (Env) | Default: 18.16.1 | Input: ${{ inputs.node-version }}"
          echo "Lint Required: ${{ env.IS_LINT_REQUIRED }} (Env) | Default: true | Input: ${{ inputs.lint-required }}"
          echo "Format Check Required: ${{ env.IS_FORMAT_CHECK_REQUIRED }} (Env) | Default: true | Input: ${{ inputs.format-check-required }}"
          echo "Apply Patches Required: ${{ env.IS_APPLY_PATCHES_REQUIRED }} (Env) | Default: true | Input: ${{ inputs.apply-patches-required }}"
          echo "Unit Tests Required: ${{ env.IS_UNIT_TESTS_REQUIRED }} (Env) | Default: true | Input: ${{ inputs.unit-tests-required }}"    

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --ignore-scripts
          echo "Dependency installation complete."
        continue-on-error: false

      - name: Lint
        if: ${{ env.IS_LINT_REQUIRED == 'true' }}
        id: lint
        run: |
          echo "Running Linter..."
          npm run lint
          echo "Running Linter complete."
        continue-on-error: true

      - name: Format check
        id: format_check
        if: ${{ env.IS_FORMAT_CHECK_REQUIRED == 'true' }}
        run: |
          echo "Running format check..."
          npm run format-check
          echo "Format check complete."
        continue-on-error: true

      - name: Test apply patches
        id: test_apply_patches
        if: ${{ env.IS_APPLY_PATCHES_REQUIRED == 'true' }}
        run: |
          set -e
          shopt -s nullglob
          patches=(*.patch)
          if [ ${#patches[@]} -eq 0 ]; then
            echo "No patches to test."
          else
            for patch in "${patches[@]}"; do
              echo "Testing $patch"
              git apply --check -v "$patch" || (echo "Failed to apply patch: $patch" && exit 1)
            done
            echo "All patches applied successfully."
          fi
        continue-on-error: true

      - name: Build
        id: build
        run: |
          echo "Building the code..."
          npm run build
          echo "Build complete."
        continue-on-error: false

      - name: Unit Tests
        id: unit_tests
        if: ${{ env.IS_UNIT_TESTS_REQUIRED == 'true' }}
        run: |
          echo "Running Unit Tests..."
          npm test
          echo "Unit Tests complete."
        continue-on-error: true

      - name: Check if any step failed
        id: check_failure
        run: |
          failed=false
          
          # Check Lint
          if [[ "${{ steps.lint.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'lint' has failed! Please expand the step output for more details."
            if ${{ env.IS_LINT_REQUIRED }}; then
              failed=true
            fi
          fi
          
          # Check Format Check
          if [[ "${{ steps.format_check.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'format_check' has failed!"
            if ${{ env.IS_FORMAT_CHECK_REQUIRED }}; then
              failed=true
            fi
          fi
          
          # Check Apply Patches
          if [[ "${{ steps.test_apply_patches.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'test_apply_patches' has failed!"
            if ${{ env.IS_APPLY_PATCHES_REQUIRED }}; then
              failed=true
            fi
          fi
          
          # Check Unit Tests
          if [[ "${{ steps.unit_tests.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'unit_tests' has failed!"
            if ${{ env.IS_UNIT_TESTS_REQUIRED }}; then
              failed=true
            fi
          fi
          
          if [ "$failed" == "true" ]; then
            echo "Please expand the failed step(s) for more details."
            exit 1
          fi

  # This job is needed to get around the fact that GitHub doesn't let you reference an env in the 'if' for the job
  determine-jenkins:
    name: Determine Jenkins Job Requirement
    runs-on: ubuntu-latest
    outputs:
      run-jenkins: ${{ steps.check.outputs.run-jenkins }}
    steps:
      - name: Check if Jenkins QA job is required
        id: check
        run: |
          if [ -n "${{ env.JENKINS_QA_JOB }}" ]; then
            echo "run-jenkins=true" >> $GITHUB_ENV
            echo "run-jenkins=true" >> $GITHUB_OUTPUT
          else
            echo "run-jenkins=false" >> $GITHUB_ENV
            echo "run-jenkins=false" >> $GITHUB_OUTPUT
          fi
      - name: Log run-jenkins output
        run: |
          echo "run-jenkins: ${{ steps.check.outputs.run-jenkins }}"
  trigger-jenkins-job:
    name: Trigger QA Jenkins Job
    needs: [merge-checks, determine-jenkins]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'issue_comment' && needs.determine-jenkins.outputs.run-jenkins == 'true' }}
    steps:
      - name: Echo Input Values and Check Defaults
        run: |
          echo "Jenkins job Required:           ${{ env.IS_JENKINS_QA_REQUIRED }}"
          echo "Jenkins job Required:           ${{ env.JENKINS_QA_JOB }}"
          echo "Debug: Event Name: ${{ github.event_name }}"
          echo "Debug: Run Jenkins: ${{ needs.determine-jenkins.outputs.run-jenkins }}"
      - name: Configure
        id: configure
        run: |
          # Determine the branch name
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME=${{ github.head_ref }}
            echo "Debug: Branch Name (PR): $BRANCH_NAME"
          else
            BRANCH_NAME=${{ github.ref_name }}
            echo "Debug: Branch Name (Other): $BRANCH_NAME"
          fi
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Determine the repository name, prioritize the secret if it exists
          if [ -n "${{ env.REPO_NAME }}" ]; then
            REPO_NAME=${{ env.REPO_NAME }}
            echo "Debug: Repo Name from Env: $REPO_NAME"
          else
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            echo "Debug: Repo Name from GitHub Repository: $REPO_NAME"
          fi
          
          # Capitalize the repository name
          REPO_NAME_CAPITALized=$(echo "${REPO_NAME:0:1}" | tr '[:lower:]' '[:upper:]')${REPO_NAME:1}
          echo "Debug: Capitalized Repo Name: $REPO_NAME_CAPITALIZED"
          
          # Export the environment variables
          echo "REPO_NAME=$REPO_NAME_CAPITALIZED" >> $GITHUB_ENV
          echo "Debug: Exported Repo Name: $REPO_NAME_CAPITALIZED"

      - name: Trigger Jenkins QA Job
        id: trigger_jenkins_qa_job
        env:
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          REPO_NAME: ${{ env.REPO_NAME }}
          JENKINS_URL: ${{ env.JENKINS_URL }}
        run: |
          echo "Debug: Jenkins URL: $JENKINS_URL"
          echo "Debug: Jenkins QA Job: ${{ env.JENKINS_QA_JOB }}"
          echo "Debug: Branch Name: $BRANCH_NAME"
          echo "Debug: Repository Name: $REPO_NAME"
          curl -f -X POST "${JENKINS_URL}/job/${{ env.JENKINS_QA_JOB }}/buildWithParameters?SPECIFY_${REPO_NAME}_BRANCH=true&${REPO_NAME}_BRANCH=${BRANCH_NAME}" \
            --user "${{ secrets.JENKINS_API_CREDS }}"
        continue-on-error: true

      - name: Check if any step failed
        id: check_failure
        run: |
          failed=false
          
          # Check Jenkins QA job - This just checks that the workflow step passes but will later be configured to wait for the actual Jenkins job to pass/fail
          if [[ "${{ steps.trigger_jenkins_qa_job.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'Trigger Jenkins QA Job' has failed!"
            if ${{ env.IS_JENKINS_QA_REQUIRED }}; then
              failed=true
            fi
          fi
          if [ "$failed" == "true" ]; then
            echo "Please expand the failed step(s) for more details."
            exit 1
          fi
