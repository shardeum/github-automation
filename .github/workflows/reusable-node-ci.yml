name: Shardeum Reusable CI Workflow for Node projects

# All variables must be set at the repo workflow call and provided to this shared/reusable workflow
on:
  workflow_call:
    inputs:
      rust-version:
        required: false
        type: string
        default: ${{ vars.RUST_VERSION }}
      node-version:
        required: false
        type: string
        default: ${{ vars.NODE_VERSION }}
      lint-required:
        required: false
        type: boolean
        default: ${{ vars.IS_LINT_REQUIRED == 'true' }}
      format-check-required:
        required: false
        type: boolean
        default: ${{ vars.IS_FORMAT_CHECK_REQUIRED == 'true' }}
      apply-patches-required:
        required: false
        type: boolean
        default: ${{ vars.IS_APPLY_PATCHES_REQUIRED == 'true' }}
      unit-tests-required:
        required: false
        type: boolean
        default: ${{ vars.IS_UNIT_TESTS_REQUIRED == 'true' }}
      target-coverage:
        required: false
        type: string
        default: ${{ vars.TARGET_COVERAGE }}
env:
  NODE_VERSION: ${{ inputs.node-version }}
  RUST_VERSION: ${{ inputs.rust-version }}
  IS_LINT_REQUIRED: ${{ inputs.lint-required }}
  IS_FORMAT_CHECK_REQUIRED: ${{ inputs.format-check-required }}
  IS_APPLY_PATCHES_REQUIRED: ${{ inputs.apply-patches-required }}
  IS_UNIT_TESTS_REQUIRED: ${{ inputs.unit-tests-required }}
jobs:
  debug-info:
    runs-on: ubuntu-latest
    name: Display useful debugging information
    steps:
      - name: Display Event details
        run: |
          echo "Event Name:           ${{ github.event_name }}"
          echo "Event Action:         ${{ github.event.action }}"
          echo "Event Sender Type:    ${{ github.event.sender.type }}"
  pr_agent_job:
# Configuration File options: https://github.com/Codium-ai/pr-agent/blob/main/pr_agent/settings/configuration.toml
# GitHub Action installation: https://pr-agent-docs.codium.ai/installation/github/#run-as-a-github-action
    name: Run pr agent on every pull request, respond to user comments
    runs-on: ubuntu-latest
    if: ${{ github.event.sender.type != 'Bot' }}
    permissions:
      issues: write
      pull-requests: write
      contents: write
    steps:
      - name: PR Agent action step
        id: pragent
        uses: qodo-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github_action_config.auto_review: "true" # enable auto review
          github_action_config.auto_describe: "false" # disable auto describe
          github_action_config.auto_improve: "false" # disable auto improve

  merge-checks:
    name: QA merge checks
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'issue_comment' }}
    permissions:
      contents: read
    steps:
#     https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Echo Input Values and Check Defaults
        run: |
          echo "*** Start - Check inputs in shared workflow ***"
          echo "Node Version - Var: ${{ vars.NODE_VERSION }} | Input: ${{ inputs.node-version }} | Env: ${{ env.NODE_VERSION }}"
          echo "Lint Required - Var: ${{ vars.IS_LINT_REQUIRED }} | Input: ${{ inputs.lint-required }} | Env: ${{ env.IS_LINT_REQUIRED }}"
          echo "Format Check Required - Var: ${{ vars.IS_FORMAT_CHECK_REQUIRED }} | Input: ${{ inputs.format-check-required }} | Env: ${{ env.IS_FORMAT_CHECK_REQUIRED }}"
          echo "Apply Patches Required - Var: ${{ vars.IS_APPLY_PATCHES_REQUIRED }} | Input: ${{ inputs.apply-patches-required }} | Env: ${{ env.IS_APPLY_PATCHES_REQUIRED }}"
          echo "Unit Tests Required - Var: ${{ vars.IS_UNIT_TESTS_REQUIRED }} | Input: ${{ inputs.unit-tests-required }} | Env: ${{ env.IS_UNIT_TESTS_REQUIRED }}"
          echo "*** End - Check inputs in shared workflow ***"

      - name: Install and Build
        run: |
          echo "Install dependencies and build the project..."
          npm ci
          echo "Install and Build complete."
        continue-on-error: false

      - name: Lint
        id: lint
        run: |
          echo "Running Linter..."
          npm run lint
          echo "Running Linter complete."
        continue-on-error: true

      - name: Format check
        id: format_check
        run: |
          echo "Running format check..."
          npm run format-check
          echo "Format check complete."
        continue-on-error: true

      - name: Test apply patches
        id: test_apply_patches
        run: |
          echo "Test apply all patches..."
          set -e
          shopt -s nullglob
          patches=(*.patch)
          if [ ${#patches[@]} -eq 0 ]; then
            echo "No patches to test."
          else
            for patch in "${patches[@]}"; do
              echo "Testing $patch"
              git apply --check -v "$patch" || (echo "Failed to apply patch: $patch" && exit 1)
            done
            echo "All patches applied successfully."
          fi
        continue-on-error: true

      - name: Run Tests and Collect Coverage
        id: unit_tests
        run: |
          if npm run | grep -q "test:coverage"; then
            echo "Running test:coverage now..." 
            OUTPUT=$(npm run test:coverage)
            echo "$OUTPUT"
            ls -la coverage
            jq '.total.lines.pct' coverage/coverage-summary.json
            COVERAGE_PERCENT=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            echo "Coverage: $COVERAGE_PERCENT"
            echo "coverage_ran=true" >> $GITHUB_ENV
            echo "COVERAGE=$COVERAGE_PERCENT" >> $GITHUB_ENV
          else
            echo "test:coverage not found, running npm run test"
            npm run test
            echo "coverage_ran=false" >> $GITHUB_ENV
            echo "COVERAGE=0" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Check if any step failed
        id: check_failure
        run: |
          failed=false
          
          # Check Lint
          if [[ "${{ steps.lint.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'lint' has failed! Please expand the step output for more details."
            echo "IS_LINT_REQUIRED = ${{ env.IS_LINT_REQUIRED }}"
            if ${{ env.IS_LINT_REQUIRED }}; then
              failed=true
            fi
          fi
          
          # Check Format Check
          if [[ "${{ steps.format_check.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'format_check' has failed!"
            echo "IS_FORMAT_CHECK_REQUIRED = ${{ env.IS_FORMAT_CHECK_REQUIRED }}"
            if ${{ env.IS_FORMAT_CHECK_REQUIRED }}; then
              failed=true
            fi
          fi
          
          # Check Apply Patches
          if [[ "${{ steps.test_apply_patches.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'test_apply_patches' has failed!"
            echo "IS_APPLY_PATCHES_REQUIRED = ${{ env.IS_APPLY_PATCHES_REQUIRED }}"
            if ${{ env.IS_APPLY_PATCHES_REQUIRED }}; then
              failed=true
            fi
          fi
          
          # Check Unit Tests
          if [[ "${{ steps.unit_tests.outcome }}" == "failure" ]]; then
            echo "ERROR! Step 'unit_tests' has failed!"
            echo "IS_UNIT_TESTS_REQUIRED = ${{ env.IS_UNIT_TESTS_REQUIRED }}"
            if ${{ env.IS_UNIT_TESTS_REQUIRED }}; then
              failed=true
            fi
          fi
          
          if [ "$failed" == "true" ]; then
            echo "Please expand the failed step(s) for more details."
            echo "Linting, Format Check, Unit Tests and Apply Patches are required to pass by default but may be overridden at the Org or Repo level by setting the corresponding variable(s) to 'true' or 'false'. Please notify Systems & Automation to make this request"
            exit 1
          fi

      - name: Check Coverage
        if: steps.unit_tests.outcome == 'success' && env.coverage_ran == 'true'
        id: check_coverage
        run: |
          THRESHOLD=$(grep -oP '(?<=lines: )\d+' jest.config.js)
          TARGET_COVERAGE=${{ inputs.target-coverage }}
          echo "coverage_passed=false" >> $GITHUB_ENV

          if [ -z "$COVERAGE" ] || [ -z "$TARGET_COVERAGE" ] || [ -z "$THRESHOLD" ]; then
            echo "One of the coverage variables is unset. Please check the test outputs."
            exit 1
          fi

          if [ "$COVERAGE" -ge "$TARGET_COVERAGE" ]; then
            echo "Coverage is above or equal to the target of $TARGET_COVERAGE%. Test passes."
            echo "coverage_passed=true" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "$THRESHOLD" ]; then
            echo "Coverage is below $TARGET_COVERAGE% but meets or exceeds the current threshold. Test passes."
            echo "coverage_passed=true" >> $GITHUB_ENV
          else
            echo "Coverage check failed! Coverage is below target ($TARGET_COVERAGE%) and below the current threshold ($THRESHOLD)."
            if [ "${{ env.IS_UNIT_TESTS_REQUIRED }}" == "true" ]; then
              echo "Coverage has decreased below the threshold and tests are required to pass. Failing the build."
              exit 1
            else
              echo "Coverage has decreased below the threshold but tests are NOT required to pass"
              exit 0
            fi
          fi
